Index: src/main/java/com/ps/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ps;\n\nimport com.ps.DAOs.TransactionDao;\nimport org.apache.commons.dbcp2.BasicDataSource;\n\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.util.ArrayList;\nimport java.util.Base64;\nimport java.util.Scanner;\n\npublic class Main {\n    private static TransactionDao transactionDao;\n    public static void main(String[] args) {\n        display(args);\n    }\n    public static void init(String[] args){\n        BasicDataSource basicDataSource = new BasicDataSource();\n        basicDataSource.setUrl(\"jdbc:mysql://localhost:3306/AccountingLedger\");\n        basicDataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n        basicDataSource.setUsername(args[0]);\n        basicDataSource.setPassword(args[1]);\n\n        transactionDao = new TransactionDao(basicDataSource);\n\n    }\n    public static void display(String[] args){\n        init(args);\n        Scanner scanner = new Scanner(System.in);\n        Ledger ledger = new Ledger();\n        int userIn;\n        do {\n            System.out.println(\"Welcome to HAMM Accounting. Please select an option: \");\n            System.out.println(\"\\t1) Add deposit\");\n            System.out.println(\"\\t2) Make Payment\");\n            System.out.println(\"\\t3) Display Ledger\");\n            System.out.println(\"\\t4) Exit\");\n            userIn = scanner.nextInt();\n\n            switch (userIn) {\n                case 1:\n                    //Add a deposit prompt the user for a deposit information and save it to CSV\n                    addDeposit(scanner, ledger);\n                    break;\n                case 2:\n                    // prompt user for debit information to save to file\n                    makePayment(scanner, ledger);\n                    break;\n                case 3:\n                    //display ledger menu\n                    displayLedgerMenu(scanner, ledger);\n                    break;\n                case 4:\n                    System.out.println(\"Thank you for banking with us.\");\n                    break;\n                default:\n                    System.out.println(\"Command not found.\");\n            }\n        } while (userIn != 4);\n    }\n\n\n    //method to display ledger menu\n    private static void displayLedgerMenu(Scanner scanner, Ledger ledger) {\n        System.out.println(\"Ledger: \");\n        int ledgerCommand;\n        do {\n            System.out.println(\"\\t1) Display all entries: \");\n            System.out.println(\"\\t2) Display deposits;\");\n            System.out.println(\"\\t3) Display Payments\");\n            System.out.println(\"\\t4) Reports Menu\");\n            System.out.println(\"\\t5) Back\");\n            ledgerCommand = scanner.nextInt();\n            scanner.nextLine();//consume new line\n            switch (ledgerCommand) {\n                case 1:\n                    //display all entries\n                    ledger.displayAllTransactions();\n                    break;\n                case 2:\n                    // display deposits\n                    ledger.displayOnlyDeposits();\n                    break;\n                case 3:\n                    //display payments\n                    ledger.displayOnlyPayments();\n                    break;\n                case 4:\n                    //reports menu\n                    displayReportsMenu(scanner, ledger);\n                    break;\n                case 5:\n                    break;\n                default:\n                    System.out.println(\"Invalid option.\");\n\n            }\n        } while (ledgerCommand != 5);\n\n    }\n\n    //method to display reports menu\n    private static void displayReportsMenu(Scanner scanner, Ledger ledger) {\n        int reportCommand;\n        do {\n            System.out.println(\"Search Reports by: \");\n            System.out.println(\"\\t1) Month to Date: \");\n            System.out.println(\"\\t2) Previous Month;\");\n            System.out.println(\"\\t3) Year to Date\");\n            System.out.println(\"\\t4) Previous Year\");\n            System.out.println(\"\\t5) Vendor\");\n            System.out.println(\"\\t6) Back\");\n            reportCommand = scanner.nextInt();\n            scanner.nextLine();//consume new line;\n\n            switch (reportCommand) {\n                case 1:\n                    //month to date\n                    LocalDate currentDate = LocalDate.now();\n                    LocalDate firstDayOfMonth = currentDate.withDayOfMonth(1);\n                    LocalDate lastDayOfMonth = currentDate.withDayOfMonth(currentDate.lengthOfMonth());\n\n                    ArrayList<Transaction> monthToDateTransactions = ledger.filterTransactionsByDateRange(firstDayOfMonth, lastDayOfMonth);\n\n                    System.out.println(\"Month to Date Transactions:\");\n                    for (Transaction transaction : monthToDateTransactions) {\n                        System.out.println(transaction);\n                    }\n                    break;\n                case 2:\n                    // previous month\n                    LocalDate previousMonthFirstDay = LocalDate.now().minusMonths(1).withDayOfMonth(1);\n                    LocalDate previousMonthLastDay = previousMonthFirstDay.withDayOfMonth(previousMonthFirstDay.lengthOfMonth());\n\n                    ArrayList<Transaction> previousMonthTransactions = ledger.filterTransactionsByDateRange(previousMonthFirstDay, previousMonthLastDay);\n\n                    System.out.println(\"Previous Month Transactions:\");\n                    for (Transaction transaction : previousMonthTransactions) {\n                        System.out.println(transaction);\n                    }\n                    break;\n                case 3:\n                    //year to date\n                    LocalDate currentYearFirstDay = LocalDate.now().withDayOfYear(1);\n                    LocalDate currentYearLastDay = LocalDate.now().plusYears(1).withDayOfYear(1).minusDays(1);\n\n                    ArrayList<Transaction> yearToDateTransactions = ledger.filterTransactionsByDateRange(currentYearFirstDay, currentYearLastDay);\n\n                    System.out.println(\"Year to Date Transactions:\");\n                    for (Transaction transaction : yearToDateTransactions) {\n                        System.out.println(transaction);\n                    }\n                    break;\n                case 4:\n                    LocalDate previousYearFirstDay = LocalDate.now().minusYears(1).withDayOfYear(1);\n                    LocalDate previousYearLastDay = LocalDate.now().withDayOfYear(1).minusDays(1);\n\n                    ArrayList<Transaction> previousYearTransactions = ledger.filterTransactionsByDateRange(previousYearFirstDay, previousYearLastDay);\n\n                    System.out.println(\"Previous Year Transactions:\");\n                    for (Transaction transaction : previousYearTransactions) {\n                        System.out.println(transaction);\n                    }\n                    //previous year\n                    break;\n                case 5:\n                    System.out.println(\"Enter vendor name: \");\n\n                    String vendorName = scanner.nextLine();\n                    ArrayList<Transaction> vendorTransactions = ledger.searchByVendor(vendorName);\n                    if (vendorTransactions.isEmpty()) {\n                        System.out.println(\"No transactions for vendor: \" + vendorName);\n                    } else {\n                        System.out.println(\"Transactions for vendor \" + vendorName + \": \");\n                        for (Transaction transaction : vendorTransactions) {\n                            System.out.println(transaction);\n                        }\n                    }\n                    break;\n                case 6:\n                    break;\n                default:\n                    System.out.println(\"Invalid option.\");\n\n            }\n        } while (reportCommand != 6);\n    }\n\n    // method to receive deposit inputs\n    private static void addDeposit(Scanner scanner, Ledger ledger) {\n\n        LocalDate date = LocalDate.now();\n\n        LocalTime time = LocalTime.now();\n        scanner.nextLine();\n\n        System.out.print(\"Enter deposit description: \");\n        String description = scanner.nextLine();\n\n        System.out.print(\"Enter deposit vendor: \");\n        String vendor = scanner.nextLine();\n\n        System.out.print(\"Enter deposit amount: \");\n        float amount = scanner.nextFloat();\n        scanner.nextLine();//consume new line\n\n        ledger.addDepositToFile(date, time, description, vendor, amount);\n        System.out.println(\"Deposit added successfully.\");\n    }\n\n    //method to receive payment inputs\n    private static void makePayment(Scanner scanner, Ledger ledger) {\n\n        LocalDate date = LocalDate.now();\n\n        LocalTime time = LocalTime.now();\n        scanner.nextLine();\n\n        System.out.print(\"Enter payment description: \");\n        String description = scanner.nextLine();\n\n        System.out.print(\"Enter payment vendor: \");\n        String vendor = scanner.nextLine();\n\n        System.out.print(\"Enter payment amount: \");\n        float amount = scanner.nextFloat();\n        scanner.nextLine();//consume new line\n\n        ledger.makePaymentToFile(date, time, description, vendor, amount);\n        System.out.println(\"Payment made successfully.\");\n    }\n}\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/ps/Main.java b/src/main/java/com/ps/Main.java
--- a/src/main/java/com/ps/Main.java	(revision d2af68c09be6589c25ac39d87a9245c44fb8e63b)
+++ b/src/main/java/com/ps/Main.java	(date 1721051825479)
@@ -1,42 +1,24 @@
 package com.ps;
 
-import com.ps.DAOs.TransactionDao;
-import org.apache.commons.dbcp2.BasicDataSource;
-
 import java.time.LocalDate;
 import java.time.LocalTime;
 import java.util.ArrayList;
-import java.util.Base64;
 import java.util.Scanner;
 
 public class Main {
-    private static TransactionDao transactionDao;
     public static void main(String[] args) {
-        display(args);
-    }
-    public static void init(String[] args){
-        BasicDataSource basicDataSource = new BasicDataSource();
-        basicDataSource.setUrl("jdbc:mysql://localhost:3306/AccountingLedger");
-        basicDataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
-        basicDataSource.setUsername(args[0]);
-        basicDataSource.setPassword(args[1]);
-
-        transactionDao = new TransactionDao(basicDataSource);
-
-    }
-    public static void display(String[] args){
-        init(args);
         Scanner scanner = new Scanner(System.in);
         Ledger ledger = new Ledger();
         int userIn;
         do {
-            System.out.println("Welcome to HAMM Accounting. Please select an option: ");
+            System.out.println("Welcome to Moorehead Accounting. Please select an option: ");
             System.out.println("\t1) Add deposit");
             System.out.println("\t2) Make Payment");
             System.out.println("\t3) Display Ledger");
             System.out.println("\t4) Exit");
             userIn = scanner.nextInt();
 
+
             switch (userIn) {
                 case 1:
                     //Add a deposit prompt the user for a deposit information and save it to CSV
@@ -59,7 +41,6 @@
         } while (userIn != 4);
     }
 
-
     //method to display ledger menu
     private static void displayLedgerMenu(Scanner scanner, Ledger ledger) {
         System.out.println("Ledger: ");
@@ -187,6 +168,8 @@
     }
 
     // method to receive deposit inputs
+
+
     private static void addDeposit(Scanner scanner, Ledger ledger) {
 
         LocalDate date = LocalDate.now();
@@ -209,6 +192,8 @@
     }
 
     //method to receive payment inputs
+
+
     private static void makePayment(Scanner scanner, Ledger ledger) {
 
         LocalDate date = LocalDate.now();
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"e43aa2af-5c5a-4346-8f69-10359c8fee07\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/ps/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/ps/Main.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Interface\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 6\n}</component>\n  <component name=\"ProjectId\" id=\"2ijnXV2TvTDGMErtmCoYdLz3PhN\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Application.Main.executor\": \"Run\",\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"git-widget-placeholder\": \"main\",\n    \"kotlin-language-version-configured\": \"true\",\n    \"last_opened_file_path\": \"/Users/tristan/LearnToCode/capstones/AccountingLedgerVersion2.0\",\n    \"settings.editor.selected.configurable\": \"project.propVCSSupport.DirectoryMappings\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\n      <recent name=\"\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"Main config\" type=\"Application\" factoryName=\"Application\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.ps.Main\" />\n      <module name=\"CapstoneOne_AccountingLedger\" />\n      <option name=\"PROGRAM_PARAMETERS\" value=\"root 12345678\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"e43aa2af-5c5a-4346-8f69-10359c8fee07\" name=\"Changes\" comment=\"\" />\n      <created>1720012893498</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1720012893498</updated>\n    </task>\n    <servers />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision d2af68c09be6589c25ac39d87a9245c44fb8e63b)
+++ b/.idea/workspace.xml	(date 1721051718263)
@@ -5,7 +5,9 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="e43aa2af-5c5a-4346-8f69-10359c8fee07" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/ps/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/ps/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/com/ps/DAOs/TransactionDao.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/ps/DAOs/TransactionDao.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/com/ps/interfaces/TransactionInt.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/ps/interfaces/TransactionInt.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -27,24 +29,24 @@
     <option name="stateVersion" value="1" />
   </component>
   <component name="ProjectColorInfo">{
-  &quot;associatedIndex&quot;: 6
-}</component>
+    &quot;associatedIndex&quot;: 6
+    }</component>
   <component name="ProjectId" id="2ijnXV2TvTDGMErtmCoYdLz3PhN" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Application.Main.executor": "Run",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "main",
-    "kotlin-language-version-configured": "true",
-    "last_opened_file_path": "/Users/tristan/LearnToCode/capstones/AccountingLedgerVersion2.0",
-    "settings.editor.selected.configurable": "project.propVCSSupport.DirectoryMappings"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;/Users/tristan/LearnToCode/capstones/AccountingLedgerVersion2.0&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;project.propVCSSupport.DirectoryMappings&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
       <recent name="" />
